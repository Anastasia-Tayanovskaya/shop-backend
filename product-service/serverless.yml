# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-north-1
  environment:
    DYNAMODB_PRODUCTS_TABLE: ProductsDB
    DYNAMODB_STOCK_TABLE: StockDB
    REGION: ${self:provider.region}
    SQS_URL:
      Ref: CatalogItemsQueue
    SNS_TOPIC_ARN:
      Ref: CreateProductSNSTopic


  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_PRODUCTS_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_STOCK_TABLE}"
        - Effect: Allow
          Action: "sqs:*"
          Resource:
            - Fn::GetAtt: [ CatalogItemsQueue, Arn ]
        - Effect: Allow
          Action: "sns:*"
          Resource:
            Ref: CreateProductSNSTopic
        - Effect: Allow
          Action: "sns:Publish"
          Resource:
            Ref: EmailSubscription

plugins:
  - serverless-offline


resources:
  Resources:
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue

    CreateProductSNSTopic:
      Type : AWS::SNS::Topic
      Properties:
        TopicName: createProductSnsTopic

    EmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: a.tayanovskaya@gmail.com
        TopicArn:
          Ref: CreateProductSNSTopic

  Outputs:
    CatalogItemsQueueArn:
      Description: "Arn of created SQS queue from Product Service"
      Value:
        Fn::GetAtt:
          - CatalogItemsQueue
          - Arn
      Export:
        Name: ${self:provider.region}-${self:service}-CatalogItemsQueueArn
    CatalogItemsQueueUrl:
      Description: "Url of created SQS queue from Product Service"
      Value:
        Ref: CatalogItemsQueue
      Export:
        Name: ${self:provider.region}-${self:service}-CatalogItemsQueueUrl

functions:
  getProductsList:
    handler: handlers/get-product-list.getProductsList
    events:
      - http:
          path: products
          method: get
  getProductsById:
    handler: handlers/get-product.getProductsById
    events:
      - http:
          path: products/{productId}
          method: get
  createProduct:
    handler: handlers/create-product.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
  catalogBatchProcess:
    handler: handlers/catalog-batch-process.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
          batchSize: 5
          enabled: true

